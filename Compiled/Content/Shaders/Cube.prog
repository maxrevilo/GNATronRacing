//Varyings: 
//Coordenadas U,V del objeto:
varying vec2 Texcoord;
//Direccion de la camara (en coordenadas Globales): 
varying vec3 camDir;
//Normal:
varying vec3 normal;

//Vertex Shader:
#ifdef VERTEX
//uniform mat4 rMatView;
uniform mat4 rMatWorldViewProjection;

//Matriz de transformacion del mundo del Objeto (Sin la transformacion de la camara):
uniform mat4 rMatWorld;
//Posicion de la camara en coordenadas globales:
uniform vec3 rCamPos;//

//Escala de las coordenadas UV:
uniform vec2 uvScale;
   
void main( void )
{
   gl_Position = rMatWorldViewProjection * gl_Vertex;
   Texcoord    = gl_MultiTexCoord0.xy * uvScale;
   
   normal      = gl_Normal.xyz; //rMatWorld * 
   
   //Objeto en coordenadas Globales:
   vec4 objPos = rMatWorld * gl_Vertex;
   camDir      = objPos.xyz - rCamPos;
}

#endif

//Fragment Shader:
#ifdef FRAGMENT

// Potencia especular:
uniform float specPow;

//Textura de color del objeto:
uniform sampler2D baseMap;

void main( void )
{
   //Normal en coordenadas Locales:
   vec3 nNormal      = normalize(normal);
   vec3 nCamDir      = normalize(camDir);
   vec3 reflectedEye = reflect(nCamDir, nNormal);
   
   //Color del objeto en este pixel:
   vec4  fvBaseColor      = texture2D( baseMap, Texcoord );
   
   gl_FragColor = fvBaseColor;
}

#endif

