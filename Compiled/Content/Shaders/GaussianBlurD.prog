//    PARAMETERS:
uniform float     texScale;
uniform float     samples;
uniform sampler2D source;

uniform float     level;
uniform vec2      dir;


//     VARYINGS:

// Coordenadas U,V del objeto:
varying vec2 texCoord;

// Vertex Shader:
#ifdef VERTEX

void main(void)
{
   gl_Position = gl_Vertex;
   texCoord = gl_MultiTexCoord0.xy;
}

#endif

// Fragment Shader:
#ifdef FRAGMENT
const float pi = 3.14159265;
const float sigma = 5.5;

void main(void) {
    vec3 incrementalGaussian;
    incrementalGaussian.x = 1.0 / (sqrt(2.0 * pi) * sigma);
    incrementalGaussian.y = exp(-0.5 / (sigma * sigma));
    incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;
    
    float lod          = level + 1.0;
    vec2  displacement = texScale * dir * pow(2.0, level);
    
    // Central Pixel:
    vec4 avgValue           = texture2DLod(source, texCoord, lod) * incrementalGaussian.x;
    float coefficientSum    = incrementalGaussian.x;
    incrementalGaussian.xy *= incrementalGaussian.yz;
    
    float numBlurPixelsPerSide = samples / 2.0;
    // Simple bloom pixels:
    for (float i = 1.0; i <= numBlurPixelsPerSide; i++) { 
        avgValue += texture2DLod(source, texCoord - i * displacement, lod) * incrementalGaussian.x;
        avgValue += texture2DLod(source, texCoord + i * displacement, lod) * incrementalGaussian.x;         
        
        coefficientSum         += 2.0 * incrementalGaussian.x;
        incrementalGaussian.xy *= incrementalGaussian.yz;
    }
    
    gl_FragColor = 2.0 * avgValue / coefficientSum;
}

#endif

