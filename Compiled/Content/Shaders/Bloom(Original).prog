//    PARAMETERS:
uniform float bloomStr;
uniform sampler2D extraction;
uniform sampler2D base;
uniform float texScaler;

//     VARYINGS:
varying vec2 texCoord;


// Vertex Shader:
#ifdef VERTEX

void main(void)
{
   vec2 P = sign(gl_Vertex.xy);
   gl_Position = vec4(P, 0.0, 1.0 );
   
   texCoord = P * 0.5 + 0.5;
}
#endif

// Fragment Shader:
#ifdef FRAGMENT

#define SAMPLES 7

vec3 gaussFilter[SAMPLES] = vec3[SAMPLES](
   vec3(-3.0, 0.0,  1.0/64.0),
   vec3(-2.0, 0.0,  6.0/64.0),
   vec3(-1.0, 0.0, 15.0/64.0),
   vec3( 0.0, 0.0, 20.0/64.0),
   vec3( 1.0, 0.0, 15.0/64.0),
   vec3( 2.0, 0.0,  6.0/64.0),
   vec3( 3.0, 0.0,  1.0/64.0)
   );


vec2 layerStr[4] = vec2[4](
   vec2(0.25, 0.0),
   vec2(0.25, 2.0),
   vec2(0.25, 4.0),
   vec2(0.25, 6.0)
   );


   
void main(void)
{  
   vec4 color = vec4(0.0);
   int i, j;
	
   for (i = 0; i < SAMPLES; i++)
   {
      color += texture2DLod(
      extraction,
      texCoord + gaussFilter[i].yx * texScaler
      ,layerStr[0].y 
      ) * gaussFilter[i].z * layerStr[0].x;
   }
   
   
   for (i = 0; i < SAMPLES; i++)
   {
      color += texture2DLod(
      extraction,
      texCoord + gaussFilter[i].yx * texScaler * 2.0
      ,layerStr[1].y 
      ) * gaussFilter[i].z * layerStr[1].x ;
   }
   
   for (i = 0; i < SAMPLES; i++)
   {
      color += texture2DLod(
      extraction,
      texCoord + gaussFilter[i].yx * texScaler * 4.0
      ,layerStr[2].y 
      ) * gaussFilter[i].z * layerStr[2].x ;
   }
   
   for (i = 0; i < SAMPLES; i++)
   {
      color += texture2DLod(
      extraction,
      texCoord + gaussFilter[i].yx * texScaler * 8.0
      ,layerStr[3].y 
      ) * gaussFilter[i].z * layerStr[3].x ;
   }
   
   
   color   *= 2.0;
   vec4 ex = clamp(color - 1.0, 0.0, 1.0);
   color   = clamp(color, 0.0, 1.0);
   
   
   color.x += ex.y + ex.z;
   color.y += ex.x + ex.z;
   color.z += ex.y + ex.x;
   
   color.a = 1.0;
   
   
   // gl_FragColor = color;
    gl_FragColor = color*bloomStr + texture2D(base, texCoord)
	+clamp(10.0*texture2DLod(extraction, texCoord, 9.0), 0.0, 0.2)
	+clamp(1.0*texture2DLod(extraction, 1.0-texCoord, 7.0), 0.0, 0.4);
   // gl_FragColor = 
   //    clamp(2.0*texture2DLod(extraction, texCoord, 6.0), 0.0, 0.3);
   //    clamp(10.0*texture2DLod(extraction, texCoord, 8.0), 0.0, 0.3);
}

#endif

